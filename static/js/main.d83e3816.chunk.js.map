{"version":3,"sources":["store.ts","hooks/props.ts","comonents/display.tsx","hooks/prop_hooks.ts","utils/rand.ts","comonents/debug.tsx","App.tsx","index.tsx"],"names":["publishClient","subscribeClient","AppContext","createContext","undefined","Title","Typography","DisplayComponent","data","useContext","useEffect","console","log","cardCSS","width","direction","style","title","value","storeReceiver","soilMoisture","precision","suffix","soilTemperature","waterLevel","lowWaterLevel","pumpStatus","terminalStatus","location","autoOperation","tempAlarm","waterLevelAlarm","exceptionAlarm","tempThreshold","moistureThreshold","waterLevelThreshold","useDisableSetter","useState","available","setAvailable","useStoreData","saveTimeStamp","randomBetween","min","max","seed","Date","getTime","randomBoolean","Boolean","Math","round","random","DebugComponent","publishDisable","reversePublishDisable","subscribeDisable","reverseSubscribeDisable","config","clientId","username","password","handlePublishMessageClick","event","preventDefault","publish","JSON","stringify","storeSender","message","success","disabled","type","onClick","client","parse","toString","mqtt","connect","on","err","error","subscribe","topic","msg","setStoreReceiver","setStoreSender","App","colStyle","marginTop","Provider","className","span","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d83e3816.chunk.js","sourcesContent":["import mqtt from 'mqtt'\n\n/**\n * 存储的变量\n * 用于数据传递\n * */\nexport type storeData = {\n  soilMoisture: number // 土壤湿度\n  soilTemperature: number // 土壤温度\n  waterLevel: number // 当前水位\n  lowWaterLevel: boolean // 低水位状态\n  pumpStatus: boolean // 水泵是否开启\n  saveTimeStamp: string // 存储时间戳\n  terminalStatus: boolean // 设备通信状态\n  location: string // 地理位置\n  autoOperation: boolean // 是否自动操作\n  tempAlarm: boolean // 是否温度报警\n  waterLevelAlarm: boolean // 是否水位报警\n  exceptionAlarm: boolean // 是否异常报警\n  tempThreshold: number // 温度阈值\n  moistureThreshold: number // 湿度阈值\n  waterLevelThreshold: number // 水位阈值\n}\n\nexport let publishClient: mqtt.Client\nexport let subscribeClient: mqtt.Client\n\nexport const bindingPublishClient = (client: mqtt.Client) => {\n  publishClient = client\n}\n\nexport const bindingSubscribeClient = (client: mqtt.Client) => {\n  subscribeClient = client\n}\n","import { createContext, Dispatch, SetStateAction } from 'react'\nimport { storeData } from '../store'\n\nexport type context = {\n  storeSender: storeData\n  setStoreSender: Dispatch<SetStateAction<storeData>>\n  storeReceiver: storeData\n  setStoreReceiver: Dispatch<SetStateAction<storeData>>\n}\n\nexport const AppContext = createContext<context|undefined>(undefined)\n","import React, { CSSProperties, useContext, useEffect } from 'react'\nimport { Space, Typography, Card, Statistic } from 'antd'\nimport { AppContext, context } from '../hooks/props'\n\nconst { Title } = Typography\n\n/**\n * 展示栏\n * */\nconst DisplayComponent = () => {\n  const data = useContext(AppContext) as context\n\n  useEffect(() => {\n    console.log('display refresh')\n  })\n\n  const cardCSS: CSSProperties = {\n    width: '200px'\n  }\n\n  return (\n    <Space direction={'vertical'}>\n      <Title>\n        mqtt数据展示框\n      </Title>\n      <Space>\n        <Card style={cardCSS}>\n          <Statistic\n            title={'土壤湿度'}\n            value={data.storeReceiver.soilMoisture}\n            precision={2}\n            suffix={'rh'}\n          />\n        </Card>\n        <Card style={cardCSS}>\n          <Statistic\n            title={'土壤温度'}\n            value={data.storeReceiver.soilTemperature}\n            precision={2}\n            suffix={'℃'}\n          />\n        </Card>\n        <Card style={cardCSS}>\n          <Statistic\n            title={'当前水位'}\n            value={data.storeReceiver.waterLevel}\n            precision={2}\n            suffix={'%'}\n          />\n        </Card>\n      </Space>\n      <Space>\n        <Card style={cardCSS}>\n          <Statistic\n            title={'水位状态'}\n            value={data.storeReceiver.lowWaterLevel ? '低水位' : '高水位'}\n          />\n        </Card>\n        <Card style={cardCSS}>\n          <Statistic\n            title={'水泵是否开启'}\n            value={data.storeReceiver.pumpStatus ? '已开启' : '未开启'}\n          />\n        </Card>\n        <Card style={cardCSS}>\n          <Statistic\n            title={'设备通信状态'}\n            value={data.storeReceiver.terminalStatus ? '连接成功' : '连接失败'}\n          />\n        </Card>\n      </Space>\n      <Space>\n        <Card style={cardCSS}>\n          <Statistic\n            title={'地理位置'}\n            value={data.storeReceiver.location}\n          />\n        </Card>\n        <Card style={cardCSS}>\n          <Statistic\n            title={'土壤湿度'}\n            value={data.storeReceiver.soilMoisture}\n            precision={2}\n            suffix={'rh'}\n          />\n        </Card>\n        <Card style={cardCSS}>\n          <Statistic\n            title={'是否自动操作'}\n            value={data.storeReceiver.autoOperation ? '是' : '否'}\n          />\n        </Card>\n      </Space>\n      <Space>\n        <Card style={cardCSS}>\n          <Statistic\n            title={'是否温度报警'}\n            value={data.storeReceiver.tempAlarm ? '是' : '否'}\n          />\n        </Card>\n        <Card style={cardCSS}>\n          <Statistic\n            title={'是否水位报警'}\n            value={data.storeReceiver.waterLevelAlarm ? '是' : '否'}\n          />\n        </Card>\n        <Card style={cardCSS}>\n          <Statistic\n            title={'是否异常报警'}\n            value={data.storeReceiver.exceptionAlarm ? '是' : '否'}\n          />\n        </Card>\n      </Space>\n      <Space>\n        <Card style={cardCSS}>\n          <Statistic\n            title={'温度阈值'}\n            value={data.storeReceiver.tempThreshold}\n            precision={2}\n            suffix={'℃'}\n          />\n        </Card>\n        <Card style={cardCSS}>\n          <Statistic\n            title={'湿度阈值'}\n            value={data.storeReceiver.moistureThreshold}\n            precision={2}\n            suffix={'rh'}\n          />\n        </Card>\n        <Card style={cardCSS}>\n          <Statistic\n            title={'水位阈值'}\n            value={data.storeReceiver.waterLevelThreshold}\n            precision={2}\n            suffix={'%'}\n          />\n        </Card>\n      </Space>\n    </Space>\n  )\n}\n\nexport default DisplayComponent\n","import { Dispatch, SetStateAction, useState } from 'react'\nimport { storeData } from '../store'\n\n/**\n * 封装disable属性\n * */\nexport const useDisableSetter = function(): [boolean, (() => void)] {\n  const [available, setAvailable] = useState(false)\n  return [\n    available,\n    () => {\n      setAvailable(!available)\n    }\n  ]\n}\n\nexport const useStoreData = function():\n  [storeData, Dispatch<SetStateAction<storeData>>] {\n  const [store, setStore] = useState<storeData>(\n    {\n      soilMoisture: 0, // 土壤湿度\n      soilTemperature: 0, // 土壤温度\n      waterLevel: 0, // 当前水位\n      lowWaterLevel: true, // 低水位状态\n      pumpStatus: true, // 水泵是否开启\n      saveTimeStamp: '', // 存储时间戳\n      terminalStatus: true, // 设备通信状态\n      location: '', // 地理位置\n      autoOperation: true, // 是否自动操作\n      tempAlarm: true, // 是否温度报警\n      waterLevelAlarm: true, // 是否水位报警\n      exceptionAlarm: true, // 是否异常报警\n      tempThreshold: 0, // 温度阈值\n      moistureThreshold: 0, // 湿度阈值\n      waterLevelThreshold: 0 // 水位阈值\n    }\n  )\n  return [store, setStore]\n}\n","\n/**\n * 线性同余\n * */\nexport const randomBetween = (min: number, max: number) => {\n  let seed = new Date().getTime()\n  max = max || 1\n  min = min || 0\n  seed = (seed * 9301 + 49297) % 233280\n  const rnd = seed / 233280.0\n  return min + rnd * (max - min)\n}\n\nexport const randomBoolean = () => {\n  return Boolean(Math.round(Math.random()))\n}\n","import mqtt from 'mqtt'\nimport React, { MouseEvent, useContext, useEffect } from 'react'\nimport { Button, message, Space, Typography } from 'antd'\nimport { useDisableSetter } from '../hooks/prop_hooks'\nimport {\n  bindingPublishClient,\n  bindingSubscribeClient,\n  publishClient,\n  subscribeClient\n} from '../store'\nimport { randomBetween, randomBoolean } from '../utils/rand'\nimport { AppContext, context } from '../hooks/props'\n\nconst { Title } = Typography\n\n/**\n * Debug栏\n * */\nconst DebugComponent = () => {\n  const [publishDisable, reversePublishDisable] = useDisableSetter()\n  const [subscribeDisable, reverseSubscribeDisable] = useDisableSetter()\n\n  const data = useContext(AppContext) as context\n\n  useEffect(() => {\n    console.log('debug refresh')\n  })\n\n  const config: mqtt.IClientOptions = {\n    clientId: '',\n    username: 'emqx',\n    password: 'public'\n  }\n\n  const handlePublishClick = (event: MouseEvent) => {\n    event.preventDefault()\n    config.clientId = 'publish client' + Date.parse(new Date().toString()).toString()\n    bindingPublishClient(mqtt.connect('ws://39.105.110.28:8083/mqtt', config))\n    publishClient.on('connect', () => {\n      console.log(publishClient)\n      message.success('发布用mqtt成功连接!')\n      reversePublishDisable()\n    })\n\n    publishClient.on('error', (err: Error) => {\n      message.error('发布用mqtt成功连接失败!原因：' + err.message)\n    })\n  }\n\n  const handleSubscribeClick = (event: MouseEvent) => {\n    event.preventDefault()\n    config.clientId = 'subscribe client' + Date.parse(new Date().toString()).toString()\n    bindingSubscribeClient(mqtt.connect('ws://39.105.110.28:8083/mqtt', config))\n    subscribeClient.on('connect', () => {\n      console.log(publishClient)\n      message.success('订阅用mqtt成功连接!')\n      reverseSubscribeDisable()\n      subscribeClient.subscribe('test', (err: Error) => {\n        if (!err) {\n          message.success('订阅成功!')\n        } else {\n          message.error('订阅失败!原因：' + err.message)\n        }\n      })\n    })\n\n    subscribeClient.on('error', (err: Error) => {\n      message.error('订阅用mqtt成功连接失败!原因：' + err.message)\n    })\n\n    subscribeClient.on('message', (topic: string, msg: Buffer) => {\n      message.success('收到来自' + topic + '的消息！')\n      data.storeReceiver = JSON.parse(msg.toString())\n      data.setStoreReceiver(data.storeReceiver)\n\n      // excuteSQL('INSERT INTO mqtt_data_log(soilMoisture,\\n' +\n      //   'soilTemperature,\\n' +\n      //   'waterLevel,\\n' +\n      //   'lowWaterLevel,\\n' +\n      //   'pumpStatus,\\n' +\n      //   'saveTimeStamp,\\n' +\n      //   'terminalStatus,\\n' +\n      //   'location,\\n' +\n      //   'autoOperation,\\n' +\n      //   'tempAlarm,\\n' +\n      //   'waterLevelAlarm,\\n' +\n      //   'exceptionAlarm,\\n' +\n      //   'tempThreshold,\\n' +\n      //   'moistureThreshold,\\n' +\n      //   'waterLevelThreshold,\\n' +\n      //   'topic) VALUES(\\n' +\n      //   '0,0,0,1,1,1592491954000,1,\\'11\\',1,1,1,1,1,1,1,\\'11\\'\\n' +\n      //   ')',\n      // [\n      //   data.storeReceiver.soilMoisture,\n      //   data.storeReceiver.soilTemperature,\n      //   data.storeReceiver.waterLevel,\n      //   data.storeReceiver.lowWaterLevel,\n      //   data.storeReceiver.pumpStatus,\n      //   data.storeReceiver.saveTimeStamp,\n      //   data.storeReceiver.terminalStatus,\n      //   data.storeReceiver.location,\n      //   data.storeReceiver.autoOperation,\n      //   data.storeReceiver.tempAlarm,\n      //   data.storeReceiver.waterLevelAlarm,\n      //   data.storeReceiver.exceptionAlarm,\n      //   data.storeReceiver.tempThreshold,\n      //   data.storeReceiver.moistureThreshold,\n      //   data.storeReceiver.waterLevelThreshold,\n      //   topic\n      // ],\n      // (err: any, results: any) => {\n      //   if (err) {\n      //     message.error('数据库插入失败!原因：' + err.message)\n      //   } else {\n      //     message.success('插入数据成功！')\n      //   }\n      // })\n      console.log(topic + ':' + msg.toString())\n    })\n  }\n\n  const handlePublishMessageClick = (event: MouseEvent) => {\n    event.preventDefault()\n    publishClient.publish('test', JSON.stringify(data.storeSender))\n    message.success('消息已发送!')\n  }\n\n  const handleRandomMessage = (event: MouseEvent) => {\n    event.preventDefault()\n    data.storeSender = {\n      autoOperation: randomBoolean(),\n      exceptionAlarm: randomBoolean(),\n      location: '暂无',\n      lowWaterLevel: randomBoolean(),\n      moistureThreshold: randomBetween(0, 80),\n      pumpStatus: randomBoolean(),\n      saveTimeStamp: Date.parse(new Date().toString()).toString(),\n      soilMoisture: randomBetween(20, 60),\n      soilTemperature: randomBetween(20, 40),\n      tempAlarm: randomBoolean(),\n      tempThreshold: randomBetween(0, 100),\n      terminalStatus: randomBoolean(),\n      waterLevel: randomBetween(0, 100),\n      waterLevelAlarm: randomBoolean(),\n      waterLevelThreshold: randomBetween(0, 100)\n    }\n    data.setStoreSender(data.storeSender)\n    handlePublishMessageClick(event)\n  }\n\n  return (\n    <Space direction={'vertical'}>\n      <Title>\n        mqtt数据调试框\n      </Title>\n      <Space>\n        <Button\n          disabled={publishDisable}\n          type='primary'\n          onClick={handlePublishClick}>\n                    发布用mqtt连接\n        </Button>\n        <Button\n          disabled={subscribeDisable}\n          type='primary'\n          onClick={handleSubscribeClick}>\n                    订阅用mqtt连接\n        </Button>\n      </Space>\n      <Space>\n      </Space>\n      <Space>\n        <Button\n          type={'primary'}\n          disabled={!(subscribeDisable && publishDisable)}\n          onClick={handlePublishMessageClick}\n        >\n          发布信息\n        </Button>\n\n        <Button\n          disabled={!(subscribeDisable && publishDisable)}\n          onClick={handleRandomMessage}\n        >\n          直接随机信息\n        </Button>\n      </Space>\n    </Space>\n  )\n}\n\nexport default DebugComponent\n","import React, { CSSProperties, useEffect } from 'react'\nimport './App.css'\nimport { Col, Row } from 'antd'\nimport DisplayComponent from './comonents/display'\nimport DebugComponent from './comonents/debug'\nimport { AppContext } from './hooks/props'\nimport { useStoreData } from './hooks/prop_hooks'\n\nexport const App = () => {\n  const [storeSender, setStoreSender] = useStoreData()\n  const [storeReceiver, setStoreReceiver] = useStoreData()\n\n  useEffect(() => {\n    console.log()\n  })\n\n  const colStyle: CSSProperties = {\n    marginTop: '2%'\n  }\n\n  return (\n    <AppContext.Provider value={{\n      storeSender,\n      setStoreSender,\n      storeReceiver,\n      setStoreReceiver\n    }}>\n      <div className={'container'}>\n        <Row>\n          <Col span={12} style={colStyle}>\n            <DisplayComponent/>\n          </Col>\n          <Col span={12} style={colStyle}>\n            <DebugComponent/>\n          </Col>\n        </Row>\n      </div>\n    </AppContext.Provider>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { App } from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}