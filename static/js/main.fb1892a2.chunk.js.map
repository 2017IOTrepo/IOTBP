{"version":3,"sources":["store.ts","comonents/display.tsx","hooks/prop_hooks.ts","utils/rand.ts","hooks/props.ts","comonents/debug.tsx","App.tsx","index.tsx"],"names":["publishClient","subscribeClient","DisplayComponent","useEffect","console","log","direction","useDisableSetter","useState","available","setAvailable","useStoreData","soilMoisture","soilTemperature","waterLevel","lowWaterLevel","pumpStatus","saveTimeStamp","terminalStatus","location","autoOperation","tempAlarm","waterLevelAlarm","exceptionAlarm","tempThreshold","moistureThreshold","waterLevelThreshold","randomBetween","min","max","seed","Date","getTime","randomBoolean","Boolean","Math","round","random","AppContext","createContext","undefined","DebugComponent","publishDisable","reversePublishDisable","subscribeDisable","reverseSubscribeDisable","data","useContext","config","clientId","username","password","handlePublishMessageClick","event","preventDefault","publish","message","success","disabled","type","onClick","client","parse","toString","mqtt","connect","on","err","error","subscribe","topic","setStoreSender","storeSender","App","storeReceiver","setStoreReceiver","colStyle","marginTop","Provider","value","className","span","style","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb1892a2.chunk.js","sourcesContent":["import mqtt from 'mqtt'\n\n/**\n * 存储的变量\n * 用于数据传递\n * */\nexport type storeData = {\n  soilMoisture: number // 土壤湿度\n  soilTemperature: number // 土壤温度\n  waterLevel: number // 当前水位\n  lowWaterLevel: boolean // 低水位状态\n  pumpStatus: boolean // 水泵是否开启\n  saveTimeStamp: string // 存储时间戳\n  terminalStatus: boolean // 设备通信状态\n  location: string // 地理位置\n  autoOperation: boolean // 是否自动操作\n  tempAlarm: boolean // 是否温度报警\n  waterLevelAlarm: boolean // 是否水位报警\n  exceptionAlarm: boolean // 是否异常报警\n  tempThreshold: number // 温度阈值\n  moistureThreshold: number // 湿度阈值\n  waterLevelThreshold: number // 水位阈值\n}\n\nexport let publishClient: mqtt.Client\nexport let subscribeClient: mqtt.Client\n\nexport const bindingPublishClient = (client: mqtt.Client) => {\n  publishClient = client\n}\n\nexport const bindingSubscribeClient = (client: mqtt.Client) => {\n  subscribeClient = client\n}\n","import React, { useEffect } from 'react'\nimport { Space } from 'antd'\n\n/**\n * 展示栏\n * */\nconst DisplayComponent = () => {\n  useEffect(() => {\n    console.log('display refresh')\n  })\n\n  return (\n    <Space direction={'vertical'}>\n            bbb\n    </Space>\n  )\n}\n\nexport default DisplayComponent\n","import { Dispatch, SetStateAction, useState } from 'react'\nimport { storeData } from '../store'\n\n/**\n * 封装disable属性\n * */\nexport const useDisableSetter = function(): [boolean, (() => void)] {\n  const [available, setAvailable] = useState(false)\n  return [\n    available,\n    () => {\n      setAvailable(!available)\n    }\n  ]\n}\n\nexport const useStoreData = function():\n  [storeData, Dispatch<SetStateAction<storeData>>] {\n  const [store, setStore] = useState<storeData>(\n    {\n      soilMoisture: 0, // 土壤湿度\n      soilTemperature: 0, // 土壤温度\n      waterLevel: 0, // 当前水位\n      lowWaterLevel: true, // 低水位状态\n      pumpStatus: true, // 水泵是否开启\n      saveTimeStamp: '', // 存储时间戳\n      terminalStatus: true, // 设备通信状态\n      location: '', // 地理位置\n      autoOperation: true, // 是否自动操作\n      tempAlarm: true, // 是否温度报警\n      waterLevelAlarm: true, // 是否水位报警\n      exceptionAlarm: true, // 是否异常报警\n      tempThreshold: 0, // 温度阈值\n      moistureThreshold: 0, // 湿度阈值\n      waterLevelThreshold: 0 // 水位阈值\n    }\n  )\n  return [store, setStore]\n}\n","\n/**\n * 线性同余\n * */\nexport const randomBetween = (min: number, max: number) => {\n  let seed = new Date().getTime()\n  max = max || 1\n  min = min || 0\n  seed = (seed * 9301 + 49297) % 233280\n  const rnd = seed / 233280.0\n  return min + rnd * (max - min)\n}\n\nexport const randomBoolean = () => {\n  return Boolean(Math.round(Math.random()))\n}\n","import { createContext, Dispatch, SetStateAction } from 'react'\nimport { storeData } from '../store'\n\nexport type context = {\n  storeSender: storeData\n  setStoreSender: Dispatch<SetStateAction<storeData>>\n  storeReceiver: storeData\n  setStoreReceiver: Dispatch<SetStateAction<storeData>>\n}\n\nexport const AppContext = createContext<context|undefined>(undefined)\n","import mqtt from 'mqtt'\nimport React, { MouseEvent, useContext, useEffect } from 'react'\nimport { Button, message, Space } from 'antd'\nimport { useDisableSetter } from '../hooks/prop_hooks'\nimport {\n  bindingPublishClient,\n  bindingSubscribeClient,\n  publishClient,\n  subscribeClient\n} from '../store'\nimport { randomBetween, randomBoolean } from '../utils/rand'\nimport { AppContext, context } from '../hooks/props'\n\n/**\n * Debug栏\n * */\nconst DebugComponent = () => {\n  const [publishDisable, reversePublishDisable] = useDisableSetter()\n  const [subscribeDisable, reverseSubscribeDisable] = useDisableSetter()\n\n  const data = useContext(AppContext) as context\n\n  useEffect(() => {\n    console.log('debug refresh')\n  })\n\n  const config: mqtt.IClientOptions = {\n    clientId: '',\n    username: 'emqx',\n    password: 'public'\n  }\n\n  const handlePublishClick = (event: MouseEvent) => {\n    event.preventDefault()\n    config.clientId = 'publish client' + Date.parse(new Date().toString()).toString()\n    bindingPublishClient(mqtt.connect('ws://39.105.110.28:8083/mqtt', config))\n    publishClient.on('connect', () => {\n      console.log(publishClient)\n      message.success('发布用mqtt成功连接!')\n      reversePublishDisable()\n    })\n\n    publishClient.on('error', (err: Error) => {\n      message.error('发布用mqtt成功连接失败!原因：' + err.message)\n    })\n  }\n\n  const handleSubscribeClick = (event: MouseEvent) => {\n    event.preventDefault()\n    config.clientId = 'subscribe client' + Date.parse(new Date().toString()).toString()\n    bindingSubscribeClient(mqtt.connect('ws://39.105.110.28:8083/mqtt', config))\n    subscribeClient.on('connect', () => {\n      console.log(publishClient)\n      message.success('订阅用mqtt成功连接!')\n      reverseSubscribeDisable()\n      subscribeClient.subscribe('test', (err: Error) => {\n        if (!err) {\n          message.success('订阅成功!')\n        } else {\n          message.error('订阅失败!原因：' + err.message)\n        }\n      })\n    })\n\n    subscribeClient.on('error', (err: Error) => {\n      message.error('订阅用mqtt成功连接失败!原因：' + err.message)\n    })\n\n    subscribeClient.on('message', (topic: string, message: Buffer) => {\n      console.log(topic + ':' + message.toString())\n    })\n  }\n\n  const handlePublishMessageClick = (event: MouseEvent) => {\n    event.preventDefault()\n    console.log('发送信息')\n    publishClient.publish('test', 'message')\n    message.success('发送消息')\n  }\n\n  const handleRandomMessage = (event: MouseEvent) => {\n    event.preventDefault()\n    data.setStoreSender({\n      autoOperation: randomBoolean(),\n      exceptionAlarm: randomBoolean(),\n      location: '暂无',\n      lowWaterLevel: randomBoolean(),\n      moistureThreshold: randomBetween(0, 80),\n      pumpStatus: randomBoolean(),\n      saveTimeStamp: Date.parse(new Date().toString()).toString(),\n      soilMoisture: randomBetween(20, 60),\n      soilTemperature: randomBetween(20, 40),\n      tempAlarm: randomBoolean(),\n      tempThreshold: randomBetween(0, 100),\n      terminalStatus: randomBoolean(),\n      waterLevel: randomBetween(0, 100),\n      waterLevelAlarm: randomBoolean(),\n      waterLevelThreshold: randomBetween(0, 100)\n    })\n    console.log(data.storeSender)\n    handlePublishMessageClick(event)\n  }\n\n  return (\n    <Space direction={'vertical'}>\n      <Space>\n        <Button\n          disabled={publishDisable}\n          type='primary'\n          onClick={handlePublishClick}>\n                    发布用mqtt连接\n        </Button>\n        <Button\n          disabled={subscribeDisable}\n          type='primary'\n          onClick={handleSubscribeClick}>\n                    订阅用mqtt连接\n        </Button>\n      </Space>\n      <Space>\n      </Space>\n      <Space>\n        <Button\n          type={'primary'}\n          disabled={!(subscribeDisable && publishDisable)}\n          onClick={handlePublishMessageClick}\n        >\n          发布信息\n        </Button>\n\n        <Button\n          disabled={!(subscribeDisable && publishDisable)}\n          onClick={handleRandomMessage}\n        >\n          直接随机信息\n        </Button>\n      </Space>\n    </Space>\n  )\n}\n\nexport default DebugComponent\n","import React, { CSSProperties, useEffect } from 'react'\nimport './App.css'\nimport { Col, Row } from 'antd'\nimport DisplayComponent from './comonents/display'\nimport DebugComponent from './comonents/debug'\nimport { AppContext } from './hooks/props'\nimport { useStoreData } from './hooks/prop_hooks'\n\nexport const App = () => {\n  const [storeSender, setStoreSender] = useStoreData()\n  const [storeReceiver, setStoreReceiver] = useStoreData()\n\n  useEffect(() => {\n    console.log()\n  })\n\n  const colStyle: CSSProperties = {\n    marginTop: '2%'\n  }\n\n  return (\n    <AppContext.Provider value={{\n      storeSender,\n      setStoreSender,\n      storeReceiver,\n      setStoreReceiver\n    }}>\n      <div className={'container'}>\n        <Row>\n          <Col span={12} style={colStyle}>\n            <DisplayComponent/>\n          </Col>\n          <Col span={12} style={colStyle}>\n            <DebugComponent/>\n          </Col>\n        </Row>\n      </div>\n    </AppContext.Provider>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { App } from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}